name: Build strace for RISC-V

on:
  workflow_dispatch:
  push:
  schedule:
    - cron: "0 0 1 * *"

jobs:
  build:
    runs-on: RISCV64
    permissions:
      contents: write
    outputs:
      tag_name: ${{ steps.get-latest-tag.outputs.tag_name }}
      release_name: ${{ steps.get-version.outputs.release_name }}
      asset_name: ${{ steps.get-version.outputs.asset_name }}
      asset_path: ${{ steps.get-version.outputs.asset_path }}

    steps:
      - name: Install dependencies
        run: |
         export DEBIAN_FRONTEND=noninteractive
         sudo apt-get update
         sudo apt-get install -y \
           build-essential \
           make \
           git \
           autoconf \
           automake \
           wget \
           make \
           python3


      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Directories
        run: mkdir -p $GITHUB_WORKSPACE/installed_binaries
      
      - name: Check environment
        run: |
          set -eux
          uname -a
          gcc --version
          g++ --version
          ldd --version

      - name: Clone strace from mirror and checkout latest tag
        id: get-latest-tag
        run: |
          set -eux

          # Tweak Git to be more resilient on CI
          git config --global http.postBuffer 524288000
          git config --global http.maxRequests 2
          git config --global core.compression 0

          rm -rf strace installed_binaries
          git clone --depth=1 --no-tags https://github.com/strace/strace.git
          cd strace

          # Fetch only tag references (without full history)
          git fetch --tags --depth=1
          git submodule update --recursive --remote

          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)
          echo "Checking out $LATEST_TAG"

          # Fetch and checkout just that tag commit (still shallow)
          git fetch --depth=1 origin tag $LATEST_TAG
          git checkout FETCH_HEAD

          echo "tag_name=$LATEST_TAG" >> "$GITHUB_OUTPUT"

      - name: Set up Directories for Build
        run: |
          mkdir installed_binaries
      
      - name: Configure
        run: |
          cd strace
          ./bootstrap
          mkdir build
          cd build
          ../configure --prefix=$GITHUB_WORKSPACE/installed_binaries

      - name: Build
        run: |
          cd strace/build
          make -j32

      - name: Install
        run: |
          cd strace/build
          make install

      - name: Verify installation
        run: |
          cd $GITHUB_WORKSPACE/installed_binaries
          ./bin/strace --version

      - name: Get strace version and set outputs
        id: get-version
        run: |
          STRACE_VERSION=$($GITHUB_WORKSPACE/installed_binaries/bin/strace -V | head -n1 | awk '{print $4}')
          ASSET_NAME="strace-${STRACE_VERSION}-riscv64-linux.tar.gz"
          ASSET_PATH="$GITHUB_WORKSPACE/${ASSET_NAME}"

          echo "release_name=strace ${STRACE_VERSION} RISC-V" >> $GITHUB_OUTPUT
          echo "asset_name=$ASSET_NAME" >> $GITHUB_OUTPUT
          echo "asset_path=$ASSET_PATH" >> $GITHUB_OUTPUT

      - name: Package binaries
        run: |
          tar -czf ${{ steps.get-version.outputs.asset_path }} -C ${{ github.workspace }}/installed_binaries .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get-version.outputs.asset_name }}
          path: ${{ steps.get-version.outputs.asset_path }}

      - name: Create or push to tag
        run: |
          TAG=${{ steps.get-latest-tag.outputs.tag_name }}

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git ls-remote --exit-code --tags origin "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "âœ… Tag $TAG already exists. Skipping tag creation." 
          else
            echo "ðŸ†• Tag $TAG does not exist. Creating and pushing..."
            git tag "$TAG"
            git push origin "$TAG"
          fi

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get-latest-tag.outputs.tag_name }}
          files: ${{ steps.get-version.outputs.asset_path }}